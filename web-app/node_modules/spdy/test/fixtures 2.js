/* eslint-env mocha */
'use strict'

var assert = require('assert')

exports.port = 23433

exports.keys = {
  key: '-----BEGIN RSA PRIVATE KEY-----\n' +
       'DELETED_BASE64_STRING\n' +
       'DELETED_BASE64_STRING\n' +
       'DELETED_BASE64_STRING\n' +
       'DELETED_BASE64_STRING\n' +
       'DELETED_BASE64_STRING\n' +
       'DELETED_BASE64_STRING\n' +
       'DELETED_BASE64_STRING\n' +
       'DELETED_BASE64_STRING\n' +
       'DELETED_BASE64_STRING\n' +
       'DELETED_BASE64_STRING\n' +
       'DELETED_BASE64_STRING\n' +
       'DELETED_BASE64_STRING\n' +
       'DELETED_BASE64_STRING\n' +
       'DELETED_BASE64_STRING\n' +
       'DELETED_BASE64_STRING\n' +
       'DELETED_BASE64_STRING\n' +
       'DELETED_BASE64_STRING\n' +
       'DELETED_BASE64_STRING\n' +
       'DELETED_BASE64_STRING\n' +
       'DELETED_BASE64_STRING\n' +
       'DELETED_BASE64_STRING\n' +
       'DELETED_BASE64_STRING\n' +
       'DELETED_BASE64_STRING\n' +
       'DELETED_BASE64_STRING\n' +
       'DELETED_BASE64_STRING\n' +
       '-----END RSA PRIVATE KEY-----',
  cert: '-----BEGIN CERTIFICATE-----\n' +
        'DELETED_BASE64_STRING\n' +
        'DELETED_BASE64_STRING\n' +
        'DELETED_BASE64_STRING\n' +
        'DELETED_BASE64_STRING\n' +
        'DELETED_BASE64_STRING\n' +
        'DELETED_BASE64_STRING\n' +
        'DELETED_BASE64_STRING\n' +
        'DELETED_BASE64_STRING\n' +
        'DELETED_BASE64_STRING\n' +
        'DELETED_BASE64_STRING\n' +
        'DELETED_BASE64_STRING\n' +
        'DELETED_BASE64_STRING\n' +
        'DELETED_BASE64_STRING\n' +
        'DELETED_BASE64_STRING\n' +
        'DELETED_BASE64_STRING\n' +
        '-----END CERTIFICATE-----'
}

function expectData (stream, expected, callback) {
  var actual = ''

  stream.on('data', function (chunk) {
    actual += chunk
  })
  stream.on('end', function () {
    assert.equal(actual, expected)
    callback()
  })
}
exports.expectData = expectData

exports.everyProtocol = function everyProtocol (body) {
  var protocols = [
    { protocol: 'http2', npn: 'h2', version: 4 },
    { protocol: 'spdy', npn: 'spdy/3.1', version: 3.1 },
    { protocol: 'spdy', npn: 'spdy/3', version: 3 },
    { protocol: 'spdy', npn: 'spdy/2', version: 2 }
  ]

  protocols.forEach(function (protocol) {
    describe(protocol.npn, function () {
      body(protocol.protocol, protocol.npn, protocol.version)
    })
  })
}

exports.everyConfig = function everyConfig (body) {
  exports.everyProtocol(function (protocol, npn, version) {
    if (npn === 'spdy/2') {
      return
    }

    [ false, true ].forEach(function (plain) {
      describe(plain ? 'plain mode' : 'ssl mode', function () {
        body(protocol, npn, version, plain)
      })
    })
  })
}
