var test = require('tape')
var nodeCrypto = require('../')
var ourCrypto = require('browserify-sign/browser')

var rsa = {
  'private': 'DELETED_LONG_HEX_STRING',
  'public': 'DELETED_LONG_HEX_STRING'
}

var ec = {
  'private': 'DELETED_LONG_HEX_STRING',
  'public': 'DELETED_LONG_HEX_STRING'
}

rsa.private = new Buffer(rsa.private, 'hex')
rsa.public = new Buffer(rsa.public, 'hex')
ec.private = new Buffer(ec.private, 'hex')
ec.public = new Buffer(ec.public, 'hex')

function testit (keys, message, scheme) {
  var pub = keys.public
  var priv = keys.private
  test(message.toString(), function (t) {
    t.test('js sign and verify', function (t) {
      t.plan(t)
      var mySign = ourCrypto.createSign(scheme)
      var mySig = mySign.update(message).sign(priv)
      var myVer = ourCrypto.createVerify(scheme)
      t.ok(myVer.update(message).verify(pub, mySig), 'validates')
    })

    t.test('node sign and verify', function (t) {
      t.plan(t)
      var mySign = nodeCrypto.createSign(scheme)
      var mySig = mySign.update(message).sign(priv)
      var myVer = nodeCrypto.createVerify(scheme)
      t.ok(myVer.update(message).verify(pub, mySig), 'validates')
    })

    t.test('node sign and js verify', function (t) {
      t.plan(t)
      var mySign = nodeCrypto.createSign(scheme)
      var mySig = mySign.update(message).sign(priv)
      var myVer = ourCrypto.createVerify(scheme)
      t.ok(myVer.update(message).verify(pub, mySig), 'validates')
    })

    t.test('js sign and node verify', function (t) {
      t.plan(t)
      var mySign = ourCrypto.createSign(scheme)
      var mySig = mySign.update(message).sign(priv)
      var myVer = nodeCrypto.createVerify(scheme)
      t.ok(myVer.update(message).verify(pub, mySig), 'validates')
    })
  })
}

testit(rsa, new Buffer('rsa with sha256'), 'RSA-SHA256')
testit(ec, new Buffer('ec with sha1'), 'ecdsa-with-SHA1')
