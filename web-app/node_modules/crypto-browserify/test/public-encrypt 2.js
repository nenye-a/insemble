var test = require('tape')
var crypto1 = require('../')
var rsa = {
  'private': 'DELETED_LONG_HEX_STRING',
  'public': 'DELETED_LONG_HEX_STRING'
}
var crypto2 = require('public-encrypt/browser')
rsa.private = new Buffer(rsa.private, 'hex')
rsa.public = new Buffer(rsa.public, 'hex')
var encrypted = 'DELETED_LONG_HEX_STRING'

test('publicEncrypt/privateDecrypt', function (t) {
  t.test('can decrypt', function (t) {
    t.plan(2)
    // note encryption is ranomized so can't test to see if they encrypt the same
    t.equals(crypto1.privateDecrypt(rsa.private, new Buffer(encrypted, 'hex')).toString(), 'hello there I am a nice message', 'decrypt it properly')
    t.equals(crypto2.privateDecrypt(rsa.private, new Buffer(encrypted, 'hex')).toString(), 'hello there I am a nice message', 'decrypt it properly')
  })
  t.test('can round trip', function (t) {
    t.plan(2)
    var msg = 'this is a message'
    // note encryption is ranomized so can't test to see if they encrypt the same
    t.equals(crypto1.privateDecrypt(rsa.private, crypto2.publicEncrypt(rsa.public, new Buffer(msg))).toString(), msg, 'round trip it')
    t.equals(crypto2.privateDecrypt(rsa.private, crypto1.publicEncrypt(rsa.public, new Buffer(msg))).toString(), msg, 'round trip it')
  })
})

test('privateEncrypt/publicDecrypt', function (t) {
  t.test('can round trip', function (t) {
    t.plan(2)
    var msg = 'this is a message'
    // note encryption is ranomized so can't test to see if they encrypt the same
    t.equals(crypto1.publicDecrypt(rsa.public, crypto2.privateEncrypt(rsa.private, new Buffer(msg))).toString(), msg, 'round trip it')
    t.equals(crypto2.publicDecrypt(rsa.public, crypto1.privateEncrypt(rsa.private, new Buffer(msg))).toString(), msg, 'round trip it')
  })
})
