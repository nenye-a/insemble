// Mapped type to remove readonly modifiers from state
// Based on DELETED_URL_WITH_CREDENTIALS"variadic kinds" makes it into Typescript:
    // https://github.com/Microsoft/TypeScript/issues/5453
    <S = any>(
        recipe: (this: Draft<S>, draftState: Draft<S>, ...extraArgs: any[]) => void | S,
        initialState: S
    ): (currentState: S | undefined, ...extraArgs: any[]) => S

    // curried invocations without default initial state
    // 0 additional arguments
    <S = any>(
        recipe: (this: Draft<S>, draftState: Draft<S>) => void | S
    ): (currentState: S) => S
    // 1 additional argument of type A
    <S = any, A = any>(
        recipe: (this: Draft<S>, draftState: Draft<S>, a: A) => void | S
    ): (currentState: S, a: A) => S
    // 2 additional arguments of types A and B
    <S = any, A = any, B = any>(
        recipe: (this: Draft<S>, draftState: Draft<S>, a: A, b: B) => void | S
    ): (currentState: S, a: A, b: B) => S
    // 3 additional arguments of types A, B and C
    <S = any, A = any, B = any, C = any>(
        recipe: (this: Draft<S>, draftState: Draft<S>, a: A, b: B, c: C) => void | S
    ): (currentState: S, a: A, b: B, c: C) => S
    // any number of additional arguments, but with loss of type safety
    // this may be alleviated if "variadic kinds" makes it into Typescript:
    // https://github.com/Microsoft/TypeScript/issues/5453
    <S = any>(
        recipe: (this: Draft<S>, draftState: Draft<S>, ...extraArgs: any[]) => void | S
    ): (currentState: S, ...extraArgs: any[]) => S
}

export const produce: IProduce
export default produce

export const nothing: undefined

/**
 * Automatically freezes any state trees generated by immer.
 * This protects against accidental modifications of the state tree outside of an immer function.
 * This comes with a performance impact, so it is recommended to disable this option in production.
 * It is by default enabled.
 */
export function setAutoFreeze(autoFreeze: boolean): void

/**
 * Manually override whether proxies should be used.
 * By default done by using feature detection
 */
export function setUseProxies(useProxies: boolean): void

export function applyPatches<S>(state: S, patches: Patch[]): S

export function original<T>(value: T): T | void
