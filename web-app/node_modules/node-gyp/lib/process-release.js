var semver = require('semver')
  , url = require('url')
  , path = require('path')
  , log = require('npmlog')

    // versions where -headers.tar.gz started shipping
  , headersTarballRange = '>= 3.0.0 || ~0.12.10 || ~0.10.42'
  , bitsre = /\/win-(x86|x64)\//
  , bitsreV3 = /\/win-(x86|ia32|x64)\// // io.js v3.x.x shipped with "ia32" but should
                                        // have been "x86"

// Captures all the logic required to determine download URLs, local directory and 
// file names. Inputs come from command-line switches (--target, --dist-url),
// `process.version` and `process.release` where it exists.
function processRelease (argv, gyp, defaultVersion, defaultRelease) {
  var version = (semver.valid(argv[0]) && argv[0]) || gyp.opts.target || defaultVersion
    , versionSemver = semver.parse(version)
    , overrideDistUrl = gyp.opts['dist-url'] || gyp.opts.disturl
    , isDefaultVersion
    , isIojs
    , name
    , distBaseUrl
    , baseUrl
    , libUrl32
    , libUrl64
    , tarballUrl
    , canGetHeaders

  if (!versionSemver) {
    // not a valid semver string, nothing we can do
    return { version: version }
  }
  // flatten version into String
  version = versionSemver.version

  // defaultVersion should come from process.version so ought to be valid semver
  isDefaultVersion = version === semver.parse(defaultVersion).version

  // can't use process.release if we're using --target=x.y.z
  if (!isDefaultVersion)
    defaultRelease = null

  if (defaultRelease) {
    // v3 onward, has process.release
    name = defaultRelease.name.replace(/io\.js/, 'iojs') // remove the '.' for directory naming purposes
    isIojs = name === 'iojs'
  } else {
    // old node or alternative --target=
    // semver.satisfies() doesn't like prerelease tags so test major directly
    isIojs = versionSemver.major >= 1 && versionSemver.major < 4
    name = isIojs ? 'iojs' : 'node'
  }

  // check for the nvm.sh standard mirror env variables
  if (!overrideDistUrl) {
    if (isIojs) {
      if (process.env.IOJS_ORG_MIRROR) {
        overrideDistUrl = process.env.IOJS_ORG_MIRROR
      } else if (process.env.NVM_IOJS_ORG_MIRROR) {// remove on next semver-major
        overrideDistUrl = process.env.NVM_IOJS_ORG_MIRROR
        log.warn('download',
            'NVM_IOJS_ORG_MIRROR is deprecated and will be removed in node-gyp v4, ' +
            'please use IOJS_ORG_MIRROR')
      }
    } else {
      if (process.env.NODEJS_ORG_MIRROR) {
        overrideDistUrl = process.env.NODEJS_ORG_MIRROR
      } else if (process.env.NVM_NODEJS_ORG_MIRROR) {// remove on next semver-major
        overrideDistUrl = process.env.NVM_NODEJS_ORG_MIRROR
        log.warn('download',
            'NVM_NODEJS_ORG_MIRROR is deprecated and will be removed in node-gyp v4, ' +
            'please use NODEJS_ORG_MIRROR')
      }
    }
  }

  if (overrideDistUrl)
    log.verbose('download', 'using dist-url', overrideDistUrl)

  if (overrideDistUrl)
    distBaseUrl = overrideDistUrl.replace(/\/+$/, '')
  else
    distBaseUrl = isIojs ? 'DELETED_URL_WITH_CREDENTIALS