'use strict'

import path from 'path'
import nodeResolve from 'rollup-plugin-node-resolve'
import commonjs from 'rollup-plugin-commonjs'
import babel from 'rollup-plugin-babel'
import minify from 'rollup-plugin-babel-minify'
import postcss from 'rollup-plugin-postcss'
import { name, version, dependencies, peerDependencies } from '../package.json'

const PATHS = {
  INPUT: path.resolve(__dirname, '..', 'components', 'index.js'),
  DIST: path.resolve(__dirname, '..', 'dist')
}

// Converts strings into camelCase
function camelize(str) {
    return str.replace(/(?:^\w|[A-Z]|\b\w|\s+)/g, function(match, index) {
        if (+match === 0) {
            return ''
        }

        return index == 0 ? match.toLowerCase() : match.toUpperCase()
    })
}

const year = new Date().getFullYear()
const banner = `/*
* Shards React v${version} (DELETED_URL_WITH_CREDENTIALS",
          "@babel/react"
        ]
      })
    ],
    external: Object.keys(Object.assign({}, peerDependencies, dependencies))
  }

  return callback(baseConfig)
}

const CommonJSConfig = createBaseConfig(function(config) {
  return Object.assign({}, config, {
    output: {
      banner,
      name: camelize(name),
      sourcemap: true,
      format: 'cjs',
      file: path.resolve(PATHS.DIST, `${name}.common.js`)
    }
  })
})

const ESModulesConfig = createBaseConfig(function(config) {
  return Object.assign({}, config, {
    output: {
      banner,
      name: camelize(name),
      sourcemap: true,
      format: 'es',
      file: path.resolve(PATHS.DIST, `${name}.es.js`)
    }
  })
})

const UMDConfig = createBaseConfig(function(config) {
  return Object.assign({}, config, {
    output: {
      banner,
      name: camelize(name),
      sourcemap: true,
      globals: globals,
      format: 'umd',
      file: path.resolve(PATHS.DIST, `${name}.umd.js`)
    }
  })
})

const MinifiedUMDConfig = createBaseConfig(function(config) {
  config.plugins.push(minify({ comments: false }))

  return Object.assign({}, config, {
    output: {
      banner,
      name: camelize(name),
      sourcemap: true,
      globals: globals,
      format: 'umd',
      file: path.resolve(PATHS.DIST, `${name}.umd.min.js`)
    }
  })
})

module.exports = [
  CommonJSConfig,
  ESModulesConfig,
  UMDConfig,
  MinifiedUMDConfig
]
