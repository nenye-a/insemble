var tap = require("tap")
var TarHeader = require("../lib/header.js")
var tar = require("../tar.js")
var fs = require("fs")


var headers =
  { "a.txt file header":
    [ "DELETED_LONG_HEX_STRING"
    , { cksumValid: true
      , path: 'a.txt'
      , mode: 420
      , uid: 24561
      , gid: 20
      , size: 257
      , mtime: 1319493851
      , cksum: 5417
      , type: '0'
      , linkpath: ''
      , ustar: 'ustar\0'
      , ustarver: '00'
      , uname: 'isaacs'
      , gname: 'staff'
      , devmaj: 0
      , devmin: 0
      , fill: '' }
    ]

  , "omega pax": // the extended header from omega tar.
    [ "DELETED_LONG_HEX_STRING"
    , { cksumValid: true
      , path: 'PaxHeader/Ω.txt'
      , mode: 420
      , uid: 24561
      , gid: 20
      , size: 120
      , mtime: 1301254537
      , cksum: 6697
      , type: 'x'
      , linkpath: ''
      , ustar: 'ustar\0'
      , ustarver: '00'
      , uname: 'isaacs'
      , gname: 'staff'
      , devmaj: 0
      , devmin: 0
      , fill: '' } ]

  , "omega file header":
    [ "DELETED_LONG_HEX_STRING"
    , { cksumValid: true
      , path: 'Ω.txt'
      , mode: 420
      , uid: 24561
      , gid: 20
      , size: 2
      , mtime: 1301254537
      , cksum: 5690
      , type: '0'
      , linkpath: ''
      , ustar: 'ustar\0'
      , ustarver: '00'
      , uname: 'isaacs'
      , gname: 'staff'
      , devmaj: 0
      , devmin: 0
      , fill: '' } ]

  , "foo.js file header":
    [ "DELETED_LONG_HEX_STRING"
    , { cksumValid: true
      , path: 'foo.js'
      , mode: 420
      , uid: 24561
      , gid: 20
      , size: 4
      , mtime: 1301246433
      , cksum: 5519
      , type: '0'
      , linkpath: ''
      , ustar: 'ustar\0'
      , ustarver: '00'
      , uname: 'isaacs'
      , gname: 'staff'
      , devmaj: 0
      , devmin: 0
      , fill: '' }
    ]

  , "b.txt file header":
    [ "DELETED_LONG_HEX_STRING"
    , { cksumValid: true
      , path: 'b.txt'
      , mode: 420
      , uid: 24561
      , gid: 20
      , size: 512
      , mtime: 1319494079
      , cksum: 5425
      , type: '0'
      , linkpath: ''
      , ustar: 'ustar\0'
      , ustarver: '00'
      , uname: 'isaacs'
      , gname: 'staff'
      , devmaj: 0
      , devmin: 0
      , fill: '' }
    ]

  , "deep nested file":
    [ "DELETED_LONG_HEX_STRING"
    , { cksumValid: true,
        path: 'r/e/a/l/l/y/-/d/e/e/p/-/f/o/l/d/e/r/-/p/a/t/h/DELETED_LONG_HEX_STRING'
      , mode: 420
      , uid: 24561
      , gid: 20
      , size: 100
      , mtime: 1319687003
      , cksum: 18124
      , type: '0'
      , linkpath: ''
      , ustar: 'ustar\0'
      , ustarver: '00'
      , uname: 'isaacs'
      , gname: 'staff'
      , devmaj: 0
      , devmin: 0
      , fill: '' }
    ]
  }

tap.test("parsing", function (t) {
  Object.keys(headers).forEach(function (name) {
    var h = headers[name]
      , header = new Buffer(h[0], "hex")
      , expect = h[1]
      , parsed = new TarHeader(header)

    // console.error(parsed)
    t.has(parsed, expect, "parse " + name)
  })
  t.end()
})

tap.test("encoding", function (t) {
  Object.keys(headers).forEach(function (name) {
    var h = headers[name]
      , expect = new Buffer(h[0], "hex")
      , encoded = TarHeader.encode(h[1])

    // might have slightly different bytes, since the standard
    // isn't very strict, but should have the same semantics
    // checkSum will be different, but cksumValid will be true

    var th = new TarHeader(encoded)
    delete h[1].block
    delete h[1].needExtended
    delete h[1].cksum
    t.has(th, h[1], "fields "+name)
  })
  t.end()
})

// test these manually.  they're a bit rare to find in the wild
tap.test("parseNumeric tests", function (t) {
  var parseNumeric = TarHeader.parseNumeric
    , numbers =
      { "DELETED_CREDIT_CARD00": 2097151
      , "DELETED_CREDIT_CARD3737373700": 8589934591
      , "DELETED_CREDIT_CARD00": 420
      , "800000ffffffffffff": 281474976710655
      , "ffffff000000000001": -281474976710654
      , "ffffff000000000000": -281474976710655
      , "DELETED_CREDIT_CARD00": 2097152
      , "DELETED_CREDIT_CARDc5": 1393861
      , "ffffffffffff1544c5": -15383354 }
  Object.keys(numbers).forEach(function (n) {
    var b = new Buffer(n, "hex")
    t.equal(parseNumeric(b), numbers[n], n + " === " + numbers[n])
  })
  t.end()
})
