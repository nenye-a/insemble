"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _neoAsync = _interopRequireDefault(require("neo-async"));

var _pify = _interopRequireDefault(require("pify"));

var _semver = _interopRequireDefault(require("semver"));

var _loaderUtils = require("loader-utils");

var _formatSassError = _interopRequireDefault(require("./formatSassError"));

var _webpackImporter = _interopRequireDefault(require("./webpackImporter"));

var _getSassOptions = _interopRequireDefault(require("./getSassOptions"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let nodeSassJobQueue = null; // Very hacky check

function hasGetResolve(loaderContext) {
  return loaderContext.getResolve && // eslint-disable-next-line no-underscore-dangle
  loaderContext._compiler && // eslint-disable-next-line no-underscore-dangle
  loaderContext._compiler.resolverFactory && // eslint-disable-next-line no-underscore-dangle
  loaderContext._compiler.resolverFactory._create && /cachedCleverMerge/.test( // eslint-disable-next-line no-underscore-dangle
  loaderContext._compiler.resolverFactory._create.toString());
}
/**
 * The sass-loader makes node-sass and dart-sass available to webpack modules.
 *
 * @this {LoaderContext}
 * @param {string} content
 */


function loader(content) {
  const options = (0, _loaderUtils.getOptions)(this) || {};
  const callback = this.async();

  const addNormalizedDependency = file => {
    // node-sass returns POSIX paths
    this.dependency(_path.default.normalize(file));
  };

  if (typeof callback !== 'function') {
    throw new Error('Synchronous compilation is not supported anymore. See DELETED_URL_WITH_CREDENTIALS"${info}".`);
  }

  const [implementation, version] = components;

  if (!_semver.default.valid(version)) {
    throw new Error(`Invalid Sass version "${version}".`);
  }

  if (implementation === 'dart-sass') {
    if (!_semver.default.satisfies(version, '^1.3.0')) {
      throw new Error(`Dart Sass version ${version} is incompatible with ^1.3.0.`);
    }

    return module.render.bind(module);
  } else if (implementation === 'node-sass') {
    if (!_semver.default.satisfies(version, '^4.0.0')) {
      throw new Error(`Node Sass version ${version} is incompatible with ^4.0.0.`);
    } // There is an issue with node-sass when async custom importers are used
    // See https://github.com/sass/node-sass/issues/857#issuecomment-93594360
    // We need to use a job queue to make sure that one thread is always available to the UV lib


    if (nodeSassJobQueue === null) {
      const threadPoolSize = Number(process.env.UV_THREADPOOL_SIZE || 4);
      nodeSassJobQueue = _neoAsync.default.queue(module.render.bind(module), threadPoolSize - 1);
    }

    return nodeSassJobQueue.push.bind(nodeSassJobQueue);
  }

  throw new Error(`Unknown Sass implementation "${implementation}".`);
}

function getDefaultSassImpl() {
  let sassImplPkg = 'node-sass';

  try {
    require.resolve('node-sass');
  } catch (error) {
    try {
      require.resolve('sass');

      sassImplPkg = 'sass';
    } catch (ignoreError) {
      sassImplPkg = 'node-sass';
    }
  } // eslint-disable-next-line import/no-dynamic-require, global-require


  return require(sassImplPkg);
}

var _default = loader;
exports.default = _default;