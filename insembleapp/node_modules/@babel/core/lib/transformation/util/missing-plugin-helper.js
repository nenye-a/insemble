"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = generateMissingPluginMessage;
const pluginNameMap = {
  classProperties: {
    syntax: {
      name: "@babel/plugin-syntax-class-properties",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "DELETED_URL_WITH_CREDENTIALS",
      url: "https://git.io/vb4SI"
    }
  }
};

const getNameURLCombination = ({
  name,
  url
}) => `${name} (${url})`;

function generateMissingPluginMessage(missingPluginName, loc, codeFrame) {
  let helpMessage = `Support for the experimental syntax '${missingPluginName}' isn't currently enabled ` + `(${loc.line}:${loc.column + 1}):\n\n` + codeFrame;
  const pluginInfo = pluginNameMap[missingPluginName];

  if (pluginInfo) {
    const {
      syntax: syntaxPlugin,
      transform: transformPlugin
    } = pluginInfo;

    if (syntaxPlugin) {
      if (transformPlugin) {
        const transformPluginInfo = getNameURLCombination(transformPlugin);
        helpMessage += `\n\nAdd ${transformPluginInfo} to the 'plugins' section of your Babel config ` + `to enable transformation.`;
      } else {
        const syntaxPluginInfo = getNameURLCombination(syntaxPlugin);
        helpMessage += `\n\nAdd ${syntaxPluginInfo} to the 'plugins' section of your Babel config ` + `to enable parsing.`;
      }
    }
  }

  return helpMessage;
}