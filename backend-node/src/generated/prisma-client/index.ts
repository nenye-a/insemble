// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  feedback: (where?: FeedbackWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  feedback: (where: FeedbackWhereUniqueInput) => FeedbackNullablePromise;
  feedbacks: (args?: {
    where?: FeedbackWhereInput;
    orderBy?: FeedbackOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Feedback>;
  feedbacksConnection: (args?: {
    where?: FeedbackWhereInput;
    orderBy?: FeedbackOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FeedbackConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createFeedback: (data: FeedbackCreateInput) => FeedbackPromise;
  updateFeedback: (args: {
    data: FeedbackUpdateInput;
    where: FeedbackWhereUniqueInput;
  }) => FeedbackPromise;
  updateManyFeedbacks: (args: {
    data: FeedbackUpdateManyMutationInput;
    where?: FeedbackWhereInput;
  }) => BatchPayloadPromise;
  upsertFeedback: (args: {
    where: FeedbackWhereUniqueInput;
    create: FeedbackCreateInput;
    update: FeedbackUpdateInput;
  }) => FeedbackPromise;
  deleteFeedback: (where: FeedbackWhereUniqueInput) => FeedbackPromise;
  deleteManyFeedbacks: (where?: FeedbackWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  feedback: (
    where?: FeedbackSubscriptionWhereInput
  ) => FeedbackSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type FeedbackOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "user_ASC"
  | "user_DESC"
  | "content_ASC"
  | "content_DESC"
  | "type_ASC"
  | "type_DESC"
  | "timeStamp_ASC"
  | "timeStamp_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type FeedbackWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface FeedbackWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<String>;
  user_not?: Maybe<String>;
  user_in?: Maybe<String[] | String>;
  user_not_in?: Maybe<String[] | String>;
  user_lt?: Maybe<String>;
  user_lte?: Maybe<String>;
  user_gt?: Maybe<String>;
  user_gte?: Maybe<String>;
  user_contains?: Maybe<String>;
  user_not_contains?: Maybe<String>;
  user_starts_with?: Maybe<String>;
  user_not_starts_with?: Maybe<String>;
  user_ends_with?: Maybe<String>;
  user_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  timeStamp?: Maybe<DateTimeInput>;
  timeStamp_not?: Maybe<DateTimeInput>;
  timeStamp_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timeStamp_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timeStamp_lt?: Maybe<DateTimeInput>;
  timeStamp_lte?: Maybe<DateTimeInput>;
  timeStamp_gt?: Maybe<DateTimeInput>;
  timeStamp_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<FeedbackWhereInput[] | FeedbackWhereInput>;
}

export interface FeedbackCreateInput {
  id?: Maybe<ID_Input>;
  user: String;
  content?: Maybe<String>;
  type: String;
  timeStamp: DateTimeInput;
}

export interface FeedbackUpdateInput {
  user?: Maybe<String>;
  content?: Maybe<String>;
  type?: Maybe<String>;
  timeStamp?: Maybe<DateTimeInput>;
}

export interface FeedbackUpdateManyMutationInput {
  user?: Maybe<String>;
  content?: Maybe<String>;
  type?: Maybe<String>;
  timeStamp?: Maybe<DateTimeInput>;
}

export interface FeedbackSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FeedbackWhereInput>;
  AND?: Maybe<
    FeedbackSubscriptionWhereInput[] | FeedbackSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Feedback {
  id: ID_Output;
  user: String;
  content?: String;
  type: String;
  timeStamp: DateTimeOutput;
}

export interface FeedbackPromise extends Promise<Feedback>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: () => Promise<String>;
  content: () => Promise<String>;
  type: () => Promise<String>;
  timeStamp: () => Promise<DateTimeOutput>;
}

export interface FeedbackSubscription
  extends Promise<AsyncIterator<Feedback>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  timeStamp: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface FeedbackNullablePromise
  extends Promise<Feedback | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: () => Promise<String>;
  content: () => Promise<String>;
  type: () => Promise<String>;
  timeStamp: () => Promise<DateTimeOutput>;
}

export interface FeedbackConnection {
  pageInfo: PageInfo;
  edges: FeedbackEdge[];
}

export interface FeedbackConnectionPromise
  extends Promise<FeedbackConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FeedbackEdge>>() => T;
  aggregate: <T = AggregateFeedbackPromise>() => T;
}

export interface FeedbackConnectionSubscription
  extends Promise<AsyncIterator<FeedbackConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FeedbackEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFeedbackSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface FeedbackEdge {
  node: Feedback;
  cursor: String;
}

export interface FeedbackEdgePromise
  extends Promise<FeedbackEdge>,
    Fragmentable {
  node: <T = FeedbackPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FeedbackEdgeSubscription
  extends Promise<AsyncIterator<FeedbackEdge>>,
    Fragmentable {
  node: <T = FeedbackSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFeedback {
  count: Int;
}

export interface AggregateFeedbackPromise
  extends Promise<AggregateFeedback>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFeedbackSubscription
  extends Promise<AsyncIterator<AggregateFeedback>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface FeedbackSubscriptionPayload {
  mutation: MutationType;
  node: Feedback;
  updatedFields: String[];
  previousValues: FeedbackPreviousValues;
}

export interface FeedbackSubscriptionPayloadPromise
  extends Promise<FeedbackSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FeedbackPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FeedbackPreviousValuesPromise>() => T;
}

export interface FeedbackSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FeedbackSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FeedbackSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FeedbackPreviousValuesSubscription>() => T;
}

export interface FeedbackPreviousValues {
  id: ID_Output;
  user: String;
  content?: String;
  type: String;
  timeStamp: DateTimeOutput;
}

export interface FeedbackPreviousValuesPromise
  extends Promise<FeedbackPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: () => Promise<String>;
  content: () => Promise<String>;
  type: () => Promise<String>;
  timeStamp: () => Promise<DateTimeOutput>;
}

export interface FeedbackPreviousValuesSubscription
  extends Promise<AsyncIterator<FeedbackPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  timeStamp: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Feedback",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
