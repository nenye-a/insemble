### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AffinitiesDeepDive {
  demographics: Boolean!
  ecosystem: Boolean!
  growth: Boolean!
  personas: Boolean!
}

type Age {
  max: Int!
  min: Int!
}

type AutoPopulate {
  age: Age!
  categories: [String!]!
  income: Income!
  personas: [String!]!
}

type Brand {
  categories: [String!]!
  commute: [RawFilter!]
  education: [RawFilter!]
  equipment: [String!]!
  ethnicity: [RawFilter!]
  id: String!
  location: Location
  locationCount: Int
  matchingLocations: [MatchingLocation!]
  matchingProperties: [MatchingProperty!]
  maxAge: Int
  maxFrontageWidth: Int
  maxIncome: Int
  maxRent: Int
  maxSize: Int
  minAge: Int
  minDaytimePopulation: Int
  minFrontageWidth: Int
  minIncome: Int
  minRent: Int
  minSize: Int
  name: String
  newLocationPlan: NewLocationPlan
  nextLocations: [Location!]
  personas: [String!]!
  spaceType: [String!]!
  userRelation: String
}

type BrandThumbnail {
  categories: [String!]!
  id: String!
  matchingLocations: [MatchingLocation!]
  name: String
}

input BusinessInput {
  location: LocationInput
  locationCount: Int
  name: String
  newLocationPlan: NewLocationPlan
  nextLocations: [LocationInput!]
  userRelation: String
}

type CommuteDeepDive {
  name: String!
  value: Int!
}

type DeepDiveResultType {
  affinities: AffinitiesDeepDive!
  commute: [CommuteDeepDive!]!
  demographics1: DemographicDeepDive!
  demographics3: DemographicDeepDive!
  demographics5: DemographicDeepDive!
  keyFacts: KeyFactsDeepDive!
  matchValue: Float!
  nearby: [NearbyDeepDive!]!
  topPersonas: [PersonaDeepDive!]!
}

type DemographicDeepDive {
  age: [DemographicStat!]!
  education: [DemographicStat!]!
  ethnicity: [DemographicStat!]!
  gender: [DemographicStat!]!
  income: [DemographicStat!]!
}

type DemographicStat {
  growth: Float
  myLocation: Float
  name: String!
  targetLocation: Float!
}

input EditProfileTenantInput {
  company: String
  description: String
  email: String
  firstName: String
  lastName: String
  newPassword: String
  oldPassword: String
  phoneNumber: String
  title: String
}

input FilterInput {
  categories: [String!]
  commute: [String!]
  education: [String!]
  equipment: [String!]
  ethnicity: [String!]
  maxAge: Int
  maxFrontageWidth: Int
  maxIncome: Int
  maxRent: Int
  maxSize: Int
  minAge: Int
  minDaytimePopulation: Int
  minFrontageWidth: Int
  minIncome: Int
  minRent: Int
  minSize: Int
  personas: [String!]
  spaceType: [String!]
}

type Income {
  max: Int!
  min: Int!
}

type KeyFactsDeepDive {
  daytimePop: Float!
  householdGrowth2017to2022: Float!
  mediumHouseholdIncome: Float!
  mile: Int!
  numApartements: Int!
  numHospitals: Int!
  numMetro: Int!
  numUniversities: Int!
  totalHousehold: Float!
}

type LandlordAuth {
  landlord: LandlordUser!
  token: String!
}

input LandlordRegisterInput {
  company: String!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

enum LandlordTier {
  EXPLORE
  FREE
  PROFESSIONAL
  SMART
}

type LandlordUser {
  avatar: String
  company: String!
  description: String
  email: String!
  firstName: String!
  id: String!
  lastName: String!
  tier: LandlordTier!
  title: String
}

type Location {
  address: String!
  id: String!
  lat: String!
  lng: String!
}

type LocationDetailsResult {
  propertyDetails: PropertyDetails
  result: DeepDiveResultType!
}

input LocationInput {
  address: String!
  lat: String!
  lng: String!
}

type LocationPreviewResult {
  daytimePop3Mile: Float!
  medianAge: Int!
  medianIncome: Float!
  targetAddress: String!
  targetNeighborhood: String!
}

type MatchingLocation {
  lat: Float!
  lng: Float!
  loc_id: ID!
  match: Float!
}

type MatchingProperty {
  address: String!
  rent: Int!
  sqft: Int!
  type: String!
}

type Mutation {
  createBrand(business: BusinessInput, filter: FilterInput): String!
  editBrand(brandId: String!, business: BusinessInput, filter: FilterInput): String!
  editProfileTenant(profile: EditProfileTenantInput!): TenantUser!
  loginLandlord(email: String!, password: String!): LandlordAuth!
  loginTenant(email: String!, password: String!): TenantAuth!
  registerLandlord(landlord: LandlordRegisterInput!): LandlordAuth!
  registerTenant(business: BusinessInput, filter: FilterInput, tenant: TenantRegisterInput!): TenantAuth!
}

type NearbyDeepDive {
  category: String!
  distance: Float!
  lat: Float!
  lng: Float!
  name: String!
  numberRating: Float!
  placeType: [String!]!
  rating: Float
  similar: Boolean!
}

enum NewLocationPlan {
  NOT_ACTIVE
  NOT_PLANNING
  YES
}

type PersonaDeepDive {
  description: String!
  name: String!
  percentile: Float!
  tags: [String!]!
}

type PropertyDetails {
  description: String!
  mainPhoto: String!
  photos: [String!]!
  sqft: Int!
  summary: SummaryPropDetails!
  tour3D: String
}

type Query {
  autoPopulateFilter(address: String, brandName: String): AutoPopulate!
  brands: [BrandThumbnail!]!
  categories: [String!]!
  commute: [RawFilter!]!
  education: [RawFilter!]!
  equipments: [String!]!
  ethnicity: [RawFilter!]!
  hello(name: String): String!
  locationDetails(brandId: String!, selectedLocation: LocationInput, selectedPropertyId: String): LocationDetailsResult!
  locationPreview(brandId: String!, selectedLocation: LocationInput, selectedPropertyId: String): LocationPreviewResult!
  personas: [String!]!
  profileTenant: TenantUser!
  spaceType: [String!]!
  tenantMatches(brandId: String!): Brand!
}

type RawFilter {
  displayValue: String!
  rawValue: String!
}

type SummaryPropDetails {
  condition: String!
  pricePerSqft: Int!
  type: String!
}

type TenantAuth {
  brandId: String!
  tenant: TenantUser!
  token: String!
}

type TenantMatchesResult {
  matchingLocations: [MatchingLocation!]
  matchingProperties: [MatchingProperty!]
  selectedFilter: Brand
  status: Int!
  statusDetail: String!
}

input TenantRegisterInput {
  company: String!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

enum TenantTier {
  EXPLORE
  FREE
  PROFESSIONAL
  SMART
}

type TenantUser {
  avatar: String
  company: String!
  description: String
  email: String!
  firstName: String!
  id: String!
  lastName: String!
  tier: TenantTier!
  title: String
}
