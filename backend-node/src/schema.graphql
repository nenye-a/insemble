# Root Schema

# import Feedback from "./generated/prisma.graphql"

enum MatchStatus {
    Loading
    Ready
}

### Generals

input IntRange {
    min: Int!
    max: Int!
}

### Queries

enum PropertyType {
    Restaurant
    Retail
}

enum Role {
    Tenant
    Landlord
}

enum Tier {
    Free
    Explorer
    Smart
    Professional
}

input PropertyCriteria {
    rent: IntRange
    sqft: IntRange
    type: PropertyType
}

type MatchId { # TODO: naming could be better
    id: String!
}

type Match {
    status: MatchStatus!
    id: String!
    data: [MatchData!]!
}

type MatchData {
    id: String!
    name: String
    lat: Float
    lng: Float
    census: Census
    address: String
    pop: Int
    income: Int
    nearby: [PlaceRecord]
    radius: String
    price: Int
    locations: [[Float]]
    placeType: [PlaceRecord]
    likes: Int
    ratings: String
    photoCount: Int
    age: Float
    photo: String
    icon: String
    mapRating: Float
}

type Census {
    asian: Float
    black: Float
    hispanic: Float
    indian: Float
    multi: Float
    white: Float
}

type PlaceRecord {
    placeName: String!
    count: Int!
}

type User {
    id: String!
    email: String!
    password: String!
    firstName: String!
    lastName: String!
    avatar: String!
    company: String!
    role: Role!
    tier: Tier!
}

type Auth {
    token: String!
    User: User!
}

input CategoryWhereInput {
    category: String
    category_contains: String
}
# =========
# RESOLVERS
# =========

type Query {
    """
    legacy interface
    """
    categories(
        where: CategoryWhereInput
        skip: Int
        first: Int
        last: Int
    ): [String!]!

    feedback: Feedback!
    feedbacks(where: FeedbackWhereInput): [Feedback!]!

    lmatches(id: String!): Match!
    tmatches(id: String!): Match!

    search(
        categories: [String!]!
        target_income: Int!
        target_age: IntRange
        target_psychographics: [String!]
        property_criteria: PropertyCriteria
    ): MatchId!
}

type Mutation {
    login(email: String!, password: String!): Auth!
}
