
datasource db {
  provider = "postgresql"
  url = "***"
}


generator client {
  provider = "prisma-client-js"
}

enum TenantTier {
  FREE
  EXPLORE
  SMART
  PROFESSIONAL
}

enum LandlordTier {
  FREE
  EXPLORE
  SMART
  PROFESSIONAL
}

enum NewLocationPlan {
  YES
  NOT_ACTIVE
  NOT_PLANNING
}

enum MarketingPreference {
  PUBLIC
  PRIVATE
}

enum MessageRole {
  TENANT
  LANDLORD
}

model MatchingProperty {
  id         String @id @default(cuid())
  propertyId String
  address    String
  rent       Int
  sqft       Int
  type       String
}

model Location {
  id      String @id @default(cuid())
  address String
  lat     String
  lng     String
}

model LocationAndPerformance {
  id           String @id @default(cuid())
  address      String
  physicalSale String
  onlineSale   String
  estimate     String
}

model TenantUser {
  id                   String     @id @default(cuid())
  email                String     @unique
  avatar               String?
  password             String
  firstName            String
  lastName             String
  company              String
  phoneNumber          String?
  title                String?
  description          String?
  brands               Brand[]
  tier                 TenantTier
  pendingEmail         Boolean    @default(false)
  stripeCustomerId     String?    @unique
  stripeSubscriptionId String?    @unique
}

model LandlordUser {
  id                   String       @id @default(cuid())
  email                String       @unique
  avatar               String?
  password             String
  firstName            String
  lastName             String
  company              String
  phoneNumber          String?
  title                String?
  description          String?
  properties           Property[]
  tier                 LandlordTier
  pendingEmail         Boolean      @default(false)
  stripeCustomerId     String?      @unique
  stripeSubscriptionId String?      @unique
}

model Brand {
  id                     String                   @id @default(cuid())
  // Note: All field can be empty because some case
  // Brand description
  name                   String?
  location               Location?                @relation(name: "currentLocation")
  tenantUser             TenantUser?
  categories             String[]
  // Also for filter and description
  userRelation           String?
  // Goal of this brand
  newLocationPlan        NewLocationPlan?
  nextLocations          Location[]               @relation(name: "nextLocation")
  locationCount          Int?
  // Filter params for heatmap
  minAge                 Int?
  maxAge                 Int?
  minIncome              Int?
  maxIncome              Int?
  minRent                Int?
  maxRent                Int?
  personas               String[]
  education              String[]
  commute                String[]
  ethnicity              String[]
  minDaytimePopulation   Int?
  minSize                Int?
  minFrontageWidth       Int?
  equipment              String[]
  spaceType              String[]
  locationAndPerformance LocationAndPerformance[]
  matchingLocations      String?
  matchingProperties     MatchingProperty[]
  //Tenant Id from tenantMatches django api
  tenantId               String
  createdAt              DateTime                 @default(now())
}




model Space {
  id            String   @id @default(cuid())
  spaceId       String?
  mainPhoto     String
  photos        String[]
  description   String
  condition     String
  sqft          Int
  pricePerSqft  Int
  equipment     String[]
  available     DateTime
  matchingBrand String?
  createdAt     DateTime  @default(now())
}

model Property {
  id                  String              @id @default(cuid())
  propertyId          String?             @unique
  name                String
  location            Location
  landlordUser        LandlordUser
  userRelation        String
  propertyType        String[]
  marketingPreference MarketingPreference
  categories          String[]
  exclusive           String[]
  businessType        String[]
  space               Space[]
  createdAt           DateTime                 @default(now())
}

model TenantSession {
  id        String     @default(cuid()) @id
  token     String
  createdAt DateTime   @default(now())
  user      TenantUser
}

model LandlordSession {
  id        String       @default(cuid()) @id
  token     String
  createdAt DateTime     @default(now())
  user      LandlordUser
}

model LandlordRegisterVerification {
  id            String  @default(cuid()) @id
  email         String
  landlordInput String
  verified      Boolean @default(false)
  tokenEmail    String
  tokenQuery    String
}

model LandlordEmailVerification {
  id          String       @default(cuid()) @id
  email       String
  user        LandlordUser
  verified    Boolean      @default(false)
  tokenEmail  String
}

model SubscriptionTenantHistory {
  id             String     @default(cuid()) @id
  subscriptionId String
  tenantUser     TenantUser
  createdAt      DateTime   @default(now())
}

model TenantRegisterVerification {
  id            String  @default(cuid()) @id
  businessInput String?
  tenantInput   String
  filterInput   String?
  email         String
  verified      Boolean @default(false)
  tokenEmail    String
  tokenQuery    String
}

model TenantEmailVerification {
  id          String     @default(cuid()) @id
  email       String
  user        TenantUser
  verified    Boolean    @default(false)
  tokenEmail  String
}

model TenantResetPasswordVerification {
  id         String     @default(cuid()) @id
  email      String
  user       TenantUser
  verified   Boolean    @default(false)
  tokenEmail String
  tokenQuery String
}

model LandlordResetPasswordVerification {
  id         String       @default(cuid()) @id
  email      String
  user       LandlordUser
  verified   Boolean      @default(false)
  tokenEmail String
  tokenQuery String
}
model Conversation {
  id          String       @default(cuid()) @id
  tenant      TenantUser
  landlord    LandlordUser
  messages    Message[]
  brand       Brand
  property    Property
  matchScore  Int
  header      String
  createdAt   DateTime     @default(now())
}

model Message {
  id        String      @default(cuid()) @id
  sender    MessageRole
  message   String
  createdAt DateTime    @default(now())
}

model PendingConversation {
  id                       String       @default(cuid()) @id
  pendingConversationData  String
  brandId                  String
  propertyId               String
  senderRole               MessageRole
  receiverEmail            String
}