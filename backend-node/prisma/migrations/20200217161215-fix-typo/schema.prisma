
datasource db {
  provider = "postgresql"
  url = "***"
}


generator client {
  provider = "prisma-client-js"
}

enum Tier {
  FREE
  EXPLORE
  SMART
  PROFESSIONAL
}

enum NewLocationPlan {
  YES
  NOT_ACTIVE
  NOT_PLANNING
}

// model MatchingLocation {
//   id    String @id
//   lat   Float
//   lng   Float
//   match Float
// }

model MatchingProperty {
  id         String @id @default(cuid())
  propertyId String
  address    String
  rent       Int
  sqft       Int
  type       String
}

model Location {
  id      String @id @default(cuid())
  address String
  lat     String
  lng     String
}

model LocationAndPerformance {
  id           String @id @default(cuid())
  address      String
  physicalSale String
  onlineSale   String
  estimate     String
}

model TenantUser {
  id          String  @id @default(cuid())
  email       String  @unique
  avatar      String?
  password    String
  firstName   String
  lastName    String
  company     String
  title       String?
  description String?
  brands      Brand[]
  tier        Tier
}

model Brand {
  id                     String                   @id @default(cuid())
  // Note: All field can be empty because some case
  // Brand description
  name                   String?
  location               Location?                @relation(name: "currentLocation")
  categories             String[]
  // Also for filter and description
  userRelation           String?
  // Goal of this brand
  newLocationPlan        NewLocationPlan?
  nextLocations          Location[]               @relation(name: "nextLocation")
  locationCount          Int?
  // Filter params for heatmap
  minAge                 Int?
  maxAge                 Int?
  minIncome              Int?
  maxIncome              Int?
  minRent                Int?
  maxRent                Int?
  personas               String[]
  education              String[]
  commute                String[]
  minSize                Int?
  maxSize                Int?
  equipmentIds           String[]
  spaceType              String[]
  locationAndPerformance LocationAndPerformance[]
  matchingLocations      String?
  matchingProperties     MatchingProperty[]
  createdAt              DateTime                 @default(now())
}

model TenantSession {
  id        String     @default(cuid()) @id
  token     String
  createdAt DateTime   @default(now())
  user      TenantUser
}
