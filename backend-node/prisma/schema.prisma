datasource db {
  provider = "postgresql"
  url      = "postgresql://prisma:prisma@localhost:5432/insemble?schema=public"
}

generator client {
  provider = "prisma-client-js"
}

enum TenantTier {
  FREE
  PROFESSIONAL
}

enum LandlordTier {
  NO_TIER
  BASIC
  PROFESSIONAL
}

enum NewLocationPlan {
  YES
  NOT_ACTIVE
  NOT_PLANNING
}

enum MarketingPreference {
  PUBLIC
  PRIVATE
}

enum MessageRole {
  TENANT
  LANDLORD
}

enum HistoryAction {
  CREATE
  CHANGE
  CANCEL
}

model Location {
  id         String     @default(cuid()) @id
  address    String
  lat        String
  lng        String
  brands     Brand[]    @relation("currentLocation")
  brand      Brand?     @relation("nextLocation", references: [id])
  properties Property[]
}

model LocationAndPerformance {
  id           String @default(cuid()) @id
  address      String
  physicalSale String
  onlineSale   String
  estimate     String
  brand        Brand? @relation(references: [id])
}

model TenantUser {
  id                               String                            @default(cuid()) @id
  email                            String                            @unique
  avatar                           String?
  password                         String
  firstName                        String
  lastName                         String
  company                          String
  phoneNumber                      String?
  title                            String?
  description                      String?
  brands                           Brand[]
  savedProperties                  SavedProperty[]
  tier                             TenantTier
  pendingEmail                     Boolean                           @default(false)
  stripeCustomerId                 String?                           @unique
  stripeSubscriptionId             String?                           @unique
  createdAt                        DateTime                          @default(now())
  tenantSessions                   TenantSession[]
  subscriptionTenantHistories      SubscriptionTenantHistory[]
  tenantEmailVerifications         TenantEmailVerification[]
  tenantResetPasswordVerifications TenantResetPasswordVerification[]
  conversations                    Conversation[]
}

model LandlordUser {
  id                                 String                              @default(cuid()) @id
  email                              String                              @unique
  avatar                             String?
  password                           String
  firstName                          String
  lastName                           String
  company                            String
  phoneNumber                        String?
  title                              String?
  description                        String?
  properties                         Property[]
  billingAnchor                      Int?
  pendingEmail                       Boolean                             @default(false)
  stripeCustomerId                   String?                             @unique
  createdAt                          DateTime                            @default(now())
  landlordSessions                   LandlordSession[]
  landlordEmailVerifications         LandlordEmailVerification[]
  subscriptionLandlordHistories      SubscriptionLandlordHistory[]
  landlordResetPasswordVerifications LandlordResetPasswordVerification[]
  conversations                      Conversation[]
}

model Brand {
  id                     String                   @default(cuid()) @id
  // Note: All field can be empty because some case
  // Brand description
  name                   String?
  location               Location?                @relation("currentLocation", references: [id])
  tenantUser             TenantUser?              @relation(references: [id])
  categories             String[]
  // Also for filter and description
  userRelation           String?
  // Goal of this brand
  newLocationPlan        NewLocationPlan?
  nextLocations          Location[]               @relation("nextLocation")
  locationCount          Int?
  // Filter params for heatmap
  minAge                 Int?
  maxAge                 Int?
  minIncome              Int?
  maxIncome              Int?
  minRent                Int?
  maxRent                Int?
  personas               String[]
  education              String[]
  commute                String[]
  ethnicity              String[]
  minDaytimePopulation   Int?
  minSize                Int?
  maxSize                Int?
  minFrontageWidth       Int?
  equipment              String[]
  spaceType              String[]
  locationAndPerformance LocationAndPerformance[]
  matchingLocations      String?
  matchingProperties     String?
  pendingUpdate          String?
  // Tenant Id(brandId) from tenantMatches django api
  tenantId               String?
  matchId                String?                  @unique
  createdAt              DateTime                 @default(now())
  conversations          Conversation[]
}

model Space {
  id                   String              @default(cuid()) @id
  spaceId              String?             @unique
  mainPhoto            String
  photos               String[]
  description          String
  condition            String
  sqft                 Int
  pricePerSqft         Int
  equipment            String[]
  marketingPreference  MarketingPreference
  spaceType            String[]
  available            DateTime
  matchingBrand        String?
  tier                 LandlordTier
  stripeSubscriptionId String?             @unique
  createdAt            DateTime            @default(now())
  property             Property?           @relation(references: [id])
  conversations        Conversation[]
}

model Property {
  id                  String              @default(cuid()) @id
  propertyId          String?             @unique
  name                String
  location            Location            @relation(references: [id])
  landlordUser        LandlordUser        @relation(references: [id])
  userRelation        String
  userRelations       String[]
  propertyType        String[]
  marketingPreference MarketingPreference
  categories          String[]
  exclusive           String[]
  businessType        String[]
  space               Space[]
  createdAt           DateTime            @default(now())
  conversations       Conversation[]
}

model SavedProperty {
  id         String      @default(cuid()) @id
  spaceId    String
  brandId    String
  propertyId String
  matchValue Float
  createdAt  DateTime    @default(now())
  tenantUser TenantUser? @relation(references: [id])
}

model TenantSession {
  id        String     @default(cuid()) @id
  token     String
  createdAt DateTime   @default(now())
  user      TenantUser @relation(references: [id])
}

model LandlordSession {
  id        String       @default(cuid()) @id
  token     String
  createdAt DateTime     @default(now())
  user      LandlordUser @relation(references: [id])
}

model LandlordRegisterVerification {
  id            String  @default(cuid()) @id
  email         String
  landlordInput String
  verified      Boolean @default(false)
  tokenEmail    String
  tokenQuery    String
}

model LandlordEmailVerification {
  id         String       @default(cuid()) @id
  email      String
  user       LandlordUser @relation(references: [id])
  verified   Boolean      @default(false)
  tokenEmail String
}

model SubscriptionTenantHistory {
  id             String        @default(cuid()) @id
  subscriptionId String
  action         HistoryAction @default(CREATE)
  tenantUser     TenantUser    @relation(references: [id])
  createdAt      DateTime      @default(now())
}

model SubscriptionLandlordHistory {
  id             String        @default(cuid()) @id
  subscriptionId String
  action         HistoryAction @default(CREATE)
  landlordUser   LandlordUser  @relation(references: [id])
  createdAt      DateTime      @default(now())
}

model TenantRegisterVerification {
  id            String  @default(cuid()) @id
  businessInput String?
  tenantInput   String
  filterInput   String?
  email         String
  verified      Boolean @default(false)
  tokenEmail    String
  tokenQuery    String
}

model TenantEmailVerification {
  id         String     @default(cuid()) @id
  email      String
  user       TenantUser @relation(references: [id])
  verified   Boolean    @default(false)
  tokenEmail String
}

model TenantResetPasswordVerification {
  id         String     @default(cuid()) @id
  email      String
  user       TenantUser @relation(references: [id])
  verified   Boolean    @default(false)
  tokenEmail String
  tokenQuery String
}

model LandlordResetPasswordVerification {
  id         String       @default(cuid()) @id
  email      String
  user       LandlordUser @relation(references: [id])
  verified   Boolean      @default(false)
  tokenEmail String
  tokenQuery String
}

model Conversation {
  id         String       @default(cuid()) @id
  tenant     TenantUser   @relation(references: [id])
  landlord   LandlordUser @relation(references: [id])
  messages   Message[]
  brand      Brand        @relation(references: [id])
  property   Property     @relation(references: [id])
  space      Space        @relation(references: [id])
  matchScore Float
  header     String
  createdAt  DateTime     @default(now())
}

model Message {
  id           String        @default(cuid()) @id
  sender       MessageRole
  message      String
  createdAt    DateTime      @default(now())
  conversation Conversation? @relation(references: [id])
}

model PendingConversation {
  id                      String      @default(cuid()) @id
  pendingConversationData String
  brandId                 String
  spaceId                 String
  senderRole              MessageRole
  receiverContact         String
}
